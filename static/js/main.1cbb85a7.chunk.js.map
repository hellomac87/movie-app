{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","Movie_MoviePoster","map","index","Movie_MovieGenre","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie_0","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","console","log","setState","stop","this","fetch","then","response","json","data","catch","err","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0TAgCMA,SAAc,SAAAC,GAAmB,IAAjBC,EAAiBD,EAAjBC,OAAQC,EAASF,EAATE,IAC1B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,oBAIpDC,EAAa,SAAAC,GAAa,IAAXC,EAAWD,EAAXC,MACjB,OACIR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,EAAhC,MAoBOC,EAvDD,SAAAC,GAAuC,IAArCN,EAAqCM,EAArCN,MAAON,EAA8BY,EAA9BZ,OAAQa,EAAsBD,EAAtBC,OAAQC,EAAcF,EAAdE,SACnC,OACIZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAACW,EAAD,CAAaf,OAAQA,EAAQC,IAAKK,KAEtCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACVM,EAAOG,IAAI,SAACN,EAAOO,GAChB,OAAOf,EAAAC,EAAAC,cAACc,EAAD,CAAYR,MAAOA,EAAOS,IAAKF,OAG9Cf,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACXL,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CACIkB,KAAMP,EACNQ,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBC4BjBC,oNA/CbC,MAAQ,KAQRC,cAAgB,WAWd,OAVeC,EAAKF,MAAMG,OAAOd,IAAI,SAACe,GACpC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,CACL1B,MAAOyB,EAAME,cACbjC,OAAQ+B,EAAMG,mBACdf,IAAKY,EAAMI,GACXtB,OAAQkB,EAAMlB,OACdC,SAAUiB,EAAMjB,gBAOtBsB,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAAnC,EAAAoC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUb,EAAKc,WADf,OACLb,EADKU,EAAAI,KAEXC,QAAQC,IAAIhB,GACZD,EAAKkB,SAAS,CACZjB,WAJS,wBAAAU,EAAAQ,SAAAX,EAAAY,WAQbN,SAAW,WACT,OAAOO,MAAM,iEACVC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKxB,SACvByB,MAAM,SAAAC,GAAG,OAAIX,QAAQC,IAAIU,yFA7B5BP,KAAKb,8CAgCE,IACAN,EAAUmB,KAAKtB,MAAfG,OACP,OACE5B,EAAAC,EAAAC,cAAA,OAAKG,UAAWuB,EAAS,MAAQ,gBAC9BA,EAASmB,KAAKrB,gBAAkB,qBA1CvB6B,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.1cbb85a7.chunk.js","sourcesContent":["import React from \"react\";\nimport LinesEllipsis from 'react-lines-ellipsis'\nimport PropTypes from 'prop-types'\nimport './Movie.css';\n\nconst Movie = ({title, poster, genres, synopsis}) => {\n    return(\n        <div className=\"Movie\">\n            <div className=\"Movie__Column\">\n                <MoviePoster poster={poster} alt={title}/>\n            </div>\n            <div className=\"Movie__Column\">\n                <h1>{title}</h1>\n                <div className=\"Movie__Genres\">\n                    {genres.map((genre, index) => {\n                        return <MovieGenre genre={genre} key={index}/>\n                    })}\n                </div>\n                <div className=\"Movie__Synopsis\">\n                    <LinesEllipsis\n                        text={synopsis}\n                        maxLine='3'\n                        ellipsis='...'\n                        trimRight\n                        basedOn='letters'\n                    />\n                </div>\n            </div>\n        </div>            \n    )\n}\n\nconst MoviePoster = ({poster, alt}) => {\n    return (\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"/>\n    )\n}\n\nconst MovieGenre = ({genre}) => {\n    return (\n        <span className=\"Movie__Genre\">{genre} </span>\n    );\n}\n\nMovie.propTypes = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired\n}\n\nMoviePoster.propTypes = {\n    poster: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired,\n}\n\nMovieGenre.propTypes = {\n    genre: PropTypes.string.isRequired,\n}\n\nexport default Movie;","import React, { Component } from 'react';\nimport Movie from './Movie';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    \n  }\n\n  componentDidMount(){\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie) => {\n      return <Movie \n        title={movie.title_english} \n        poster={movie.medium_cover_image} \n        key={movie.id} \n        genres={movie.genres}\n        synopsis={movie.synopsis}\n      />;\n    });\n\n    return movies;\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    console.log(movies);\n    this.setState({\n      movies\n    });\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count') // 작업이 완료되면\n      .then(response => response.json()) // then을 호출한다. then function 은 1개의 attribute 만을 준다. 이것은 object이다. fetch의 결과물\n      .then(json => json.data.movies) // json으로 변환한뒤 호출\n      .catch(err => console.log(err)); // fetch 과정에 error 가 있다면 catch 해서 나에게 보여줘\n  }\n\n  render() {\n    const {movies} = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App__Loading\"}>\n        {movies ? this._renderMovies() : 'loading...'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}